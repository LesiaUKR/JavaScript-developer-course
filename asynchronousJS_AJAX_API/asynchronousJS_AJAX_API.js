/********** asynchronous JS | AJAX | API **********/

// асинхронний код запускається після того, як задача, яка виконується в "фоновому
// режимі" завершується
// асинхроннийкод являється неблокуючим
// виконання коду не чекає поки асинхронна задача завершить свою роботу

/********** synchronous code **********/

// в основному код синхронний
// синхронний код виконується рядок за рядком
// кожен рядок очікує поки закінчиться виконання попередньої строки
// тривалі операції блокують виконання коду (наприклад alert())

/********** AJAX **********/

// Asynchronous JavaScript And XML - дозволяє асинхронно взаємодіяти з
// віддаленими веб-серверами. З допомогою викликів AJAX ми можемо динамічно
// запитувати данні із веб-сервера, тобто без перезавантаження сторінки

/********** API **********/

// Application Programming Interface - частина програми, яка може використо-
// вуватись іншою програмою, щоб додатки могли взаємодіяти один з одним
// В веб-розробці існує велика кількість типів API:
//  - DOM API
//  - Geolocation API
//  - API своїх класів
//  - "онлайн" API

//  "Онлайн" API - додаток, який працює на сервері, який приймає запити на данні,
//  витягує ці дані з якоїсь БД і відправляє ці данні назад в якості відповіді

//  - ми можемо самі створювати власні веб-API (для цього потрібна backend розробка,
//  наприклад з допомогою Node.js) або використати сторонні API(дані про погоду, про країни,
//  про польоти, обмін валют, для відправки email, Google Maps ...)

// JSON - самий популярний формат обміну данних API - JavaScript об'єкт, перетворений в рядок

//*********Поділення асинхронного JS на мікро та макро процеси**************\\

// ****** Мікро процеси ***** \\
// Promise
// Observer

// ****** Макро процеси ****** \\
// setTimeout
// setInterval
// https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate
// setImmediate
// https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
// requestAnimationFrame
