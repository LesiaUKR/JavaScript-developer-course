// JSDoc - comment –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–æ–º—ñ—Å—Ç—å –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î —ñ–Ω—à–æ–º—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É —à–≤–∏–¥—à–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —â–æ —Ä–æ–±–∏—Ç—å, –ø—Ä–∏–π–º–∞—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—è.
// –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è JSDoc - comment –Ω–∞ —Ä—è–¥–∫—É –ø–µ—Ä–µ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—é—î –Ω–∞—Ç–∏—Å–∫–∞—î–º–æ /**
// –î–∞–ª—ñ –æ–ø–∏—Å—É—î–º–æ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é.

/*** FUNCTION expression ***/
// –Ω–µ –º–æ–∂–µ–º–æ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –¥–æ FUNCTION expression –¥–æ –º—ñ—Å—Ü—è —ó—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è

// const valC = 15;
// const add = function (valA, valB) {
//    // const valA = 19; //–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞—Ç–∏ –∑ const, —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ let
//    co5nsole.log("valC", valC);
//    co5nsole.log("valA", valA);
//    const sum = valA + valB;
//    return sum;
// }

/****** FUNCTION declaration ******/

// —ñ–º–µ–Ω–æ–≤–∞–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// –º–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —è–∫ –¥–æ —Ç–∞–∫ —ñ –ø—ñ—Å–ª—è –º—ñ—Å—Ü—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
// –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É –≤ –º—ñ—Å—Ü–µ –≤–∏–∫–ª–∏–∫—É
// –Ω–µ –º–æ–∂–µ  –±—É—Ç–∏ —Å—Ç—Ä—ñ–ª–∫–∏ =>

/*** Task 1 ***/
/**
 * –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î —Å—É–º—É –¥–≤–æ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ valA —ñ valB
 * @param {Number} valA
 * @param {Number} valB
 * @returns {sum}
 */
// function add(valA, valB) {
//   const sum = valA + valB;
//   return sum;
// }

/*** Task 2 ***/
/**
 * Buy product, log message with purchase info
 * @param {string} productName
 * @param {number} productQty
 * @param {number} price
 */
// function buyProduct(productName, productQty, price) {
//   console.log(
//     `You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${
//       productQty * price
//     }`
//   );
// }
// buyProduct('apple', 10, 35)

/****** ARROW FUNCTION ******/

// –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ä–∞–Ω—ñ—à–µ –º—ñ—Å—Ü—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —Å—Ç—Ä—ñ–ª–∫–∞ =>

// const buyProduct = (productName, productQty, price) => {
//   console.log(
//     `You buy ${productQty} ${productName}'s, cost per item ${price}, total cost ${
//       productQty * price
//     }`
//   );
// };

// *** –ù–ï–Ø–í–ù–ï –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è ARROW FUNCTION *** \\

/**
 * Get product total price
 * @param {number} qty - quantity items
 * @param {number} price - price per item
 * @returns {number|string} - total price/error message
 */
// const getTotalPrice = (qty, price) => qty * price;

// console.log(getTotalPrice(3, 150));

// *** –Ø–í–ù–ï –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è ARROW FUNCTION *** \\

/**
 * Get product total price
 * @param {Number} qty - quantity items
 * @param {Number} price - price per item
 * @returns {Number} - total price
 */
// const getTotalPrice = (qty, price) => {
//     return qty * price
// }
// getTotalPrice(3, 150)

// ****** –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–µ –æ–≥–æ—Ä—Ç–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –∫—Ä—É–≥–ª—ñ –¥—É–∂–∫–∏ —è–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–¥–∏–Ω ******\\

/* –û–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –∑ –¥—É–∂–∫–∞–º–∏ */

/**
 * Check user strong password üòÇ
 * @param {String} password
 * @returns {Boolean}
 */
// const checkPassword = (password) => password === 'qwerty111';

/*  –û–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –±–µ–∑ –¥—É–∂–æ–∫  */

// const checkPassword = password => {
//     return password === 'qwerty111';
// };
// console.log(checkPassword('qwerty111'));

// ******  –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤—É arguments  ARROW FUNCTION ****** \\

/*** function declaration ***/

/**
 * Log items
 */
// function getProductList(a, b) {
//   console.log(arguments);

//   const copy = Array.from(arguments);
//   const copy1 = [...arguments];
//   console.log(copy1);
//   for (const product of arguments) {
//     console.log(product);
//   }
// }

// getProductList('Apple', 'Banana', 'Orange', 'Mango', 'Watermelon')

/***  arrow function  ***/

// –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ FUNCTION declaration –≤ arrow function –≤ args –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ –Ω–∏–∂—á–µ –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ "Orange", "Mango"
// const getProductList = (a, b, ...args) => {
//   console.log(args);
// };

// getProductList("Apple", "Banana", "Orange", "Mango");

// **************************************  CALLBACK FUNCTION  *********************************************\\

// ******* Callback —Ñ—É–Ω–∫—Ü—ñ—è —É –≤–∏–≥–ª—è–¥—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—ó *****\\

// function logResult(a, b, callback) {
//   console.log(callback);
//   const result = callback(a, b);
//   console.log(`Result is ${result}`);
// }

// logResult(4, 5, add);
// logResult(4, 5, sum);

// function add(a, b) {
//   return a + b;
// }

// function sum(a, b) {
//   return a * b;
// }

// ****************** –Ü–Ω–ª–∞–π–Ω–æ–≤–∞ Callback —Ñ—É–Ω–∫—Ü—ñ—è ******************\\

// –≤ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –º–∞—Å–∏–≤—É –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ–Ω–ª–∞–π–Ω–æ–≤–∞ callback function

// function logResult(a, b, callback) {
//   console.log(callback);
//   const result = callback(a, b);
//   console.log(`Result is ${result}`);
// }

// –ø–µ—Ä–µ–¥–∞—î–º–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç  function declaration function (a, b) { return a + b;}
// logResult(4, 5, function (a, b) {
//   return a + b;
// });

// –ø–µ—Ä–µ–¥–∞—î–º–æ —Ç—ñ–ª–æ Callback —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
// –¥–∞–Ω—É —ñ–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü—ñ—é –≤–∂–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º
// logResult(4, 5, (a, b) => a + b);
// logResult(4, 5, (a, b) => a * b);

// ************************************** forEach + Callback *********************************************\\

// callback –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –º–∞—Å–∏–≤—É —ñ —Ä—ñ–¥—à–µ —è–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —á–∏ —è–∫ –Ü–Ω–ª–∞–π–Ω–æ–≤–∞ Callback —Ñ—É–Ω–∫—Ü—ñ—è
// –ø–µ—Ä–µ–±–∏—Ä–∞—é—á—ñ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—É –∑–∞–≤–∂–¥–∏ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –Ω–∞ –º–∞—Å–∏–≤—ñ

/*** –¶–∏–∫–ª for: ****/

// for (let i = 0; i < products.length; i += 1) {
//     const product = products[i];

//     console.log(`${i + 1} - ${product}`);
// }

/*** forEach: ****/

// –ø–µ—Ä–µ–±–∏—Ä–∞—î –º–∞—Å–∏–≤ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –¥–æ –∫—ñ–Ω—Ü—è
// –Ω–µ–º–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –π–æ–≥–æ
// –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î - —â–æ–± –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –≤ return - –∑–∞–≤–∂–¥–∏ –±—É–¥–µ undefined
// –Ω–µ –ø—Ä–∏—Å–≤–æ—é—é—Ç—å –≤ –∑–º—ñ–Ω–Ω—É, –±–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î
// –Ω–µ –º—É—Ç—É—î –º–∞—Å–∏–≤
// —Å–ª—É–≥—É—î –±—ñ–ª—å—à–µ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –æ–∫—Ä–µ–º–æ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç
// –í–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.

// const products = ['Apple', 'Banana', 'Orange', 'Mango', 'Watermelon'];
// // products.forEach(console.log);

// //forEach –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - callback —Ñ—É–Ω–∫—Ü—ñ—é
// //callback —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è forEach –ø—Ä–∏–π–º–∞—î —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
// // item - —î–¥–∏–Ω–∏–π –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –Ω–∞–∑–≤–∞ —ñ—Ç–µ—Ä—É—î–º–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É
// // idx - —ñ–Ω–¥–µ–∫—Å —ñ—Ç–µ—Ä—É—î–º–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—É
// //arr - —Å–∞–º –º–∞—Å–∏–≤, —è–∫–∏–π –ø–µ—Ä–µ–±–∏—Ä–∞—î–º–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç–æ–¥—ñ, –∫–æ–ª–∏ —Ö–æ—á–µ–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–º—ñ–∂–∫–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –ø—ñ–¥ —á–∞—Å —á–µ–π–Ω—ñ–Ω–≥—É
// products.forEach((item, idx, arr) => {
//   //   console.log(item);
//   //   console.log(idx);
//   //   console.log(arr);
//   console.log(`${idx + 1} - ${item}`);
//   return `${idx + 1} - ${item}`; //–ø–æ–≤–µ—Ä–Ω–µ undefined
// });

//—è–∫—â–æ —Ç—Ä–µ–±–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —è–∫–∏–π—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ callback –¥–ª—è forEach, —Ç–æ –∑–∞–º—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—É —Å—Ç–∞–≤–∏–º–æ –Ω–∏–∂–Ω—î –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è - underscore (item, _, arr)
// –æ–¥–Ω–µ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É, –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–≤–∞ –Ω–∏–∂–Ω—ñ—Ö –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è, —Ç–æ–±—Ç–æ  (_, __, arr)

// forEach –ø—ñ–¥ –∫–∞–ø–æ—Ç–æ–º - –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –±—É–¥—å —è–∫–æ–≥–æ –ø–µ—Ä–µ–±–∏—Ä–∞—é—á–æ–≥–æ –º–∞—Å–∏–≤—É –ª–µ–∂–∏—Ç—å callback —Ñ—É–Ω–∫—Ü—ñ—è —ñ —Ü–∏–∫–ª for
//—Ñ—É–Ω–∫—Ü—ñ—è –Ω–∏–∂—á–µ –¥—É–∂–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ç–µ, —â–æ –ø—ñ–¥ –∫–∞–ø–æ—Ç–æ–º —É forEach

// function customForEach(arr, callback) {
//   for (let i = 0; i < arr.length; i += 1) {
//     callback(arr[i], i, arr);
//   }
// }

// customForEach(products, (product, idx, arr) => {
//   console.log('product', product);
//   console.log('idx', idx);
//   console.log('arr', arr);
//   if (idx === 3) {
//     arr.splice(idx, 1);
//   }

//   console.log(`${idx + 1} - ${product}`);
// });
// console.log(products);

// ******************************************* –ü–†–ê–ö–¢–ò–ö–ê **************************************************\\

/***  Task - 1 ****/

// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
// createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å id —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// logProduct(product) - –∫–æ–ª–±–±–µ–∫ —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// logTotalPrice(product) - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å

// function createProduct(obj, callback) {
//   const product = {
//     id: Date.now(),
//     ...obj,
//   };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(`Product`, product);
// }

// function logTotalPrice({ price, quantity }) {
//   console.log(`Product total price ${price * quantity}`);
// }

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);

/***  Task - 2 ****/

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.
// 1 - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
// 2 - —Ñ—É–Ω–∫—Ü—ñ—é —è–∫–∞ –º–∞—î –æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
//
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —è–∫–æ–≥–æ —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// function each(arr, action) {
//   const items = [];

//   arr.forEach(elem => {
//     const result = action(elem);
//     items.push(result);
//   });
//   //–¥—Ä—É–≥–∏–π –±—ñ–ª—å—à –∫–æ—Ä–æ—Ç—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
//   //   arr.forEach((elem) => items.push(action(elem)));

//   return items;
// }

// console.log(each([64, 49, 36, 25, 16], value => value * 2));
// console.log(each([64, 49, 36, 25, 16], value => value - 10));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));
// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.floor(value)));

/***  Task - 3 ****/

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é getProductDetails, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä—É productId —Ç–∞ –¥–≤—ñ –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü—ñ—ó successCallback —Ç–∞ errorCallback.
// –§—É–Ω–∫—Ü—ñ—è getProductDetails –ø–æ–≤–∏–Ω–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ –≤–∫–∞–∑–∞–Ω–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö —É successCallback.
// –£ –≤–∏–ø–∞–¥–∫—É —è–∫—â–æ —Ç–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è errorCallback —ñ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

// const products = [
//   {
//     id: 1,
//     name: '–¢–µ–ª–µ—Ñ–æ–Ω',
//     price: 10000,
//     description: '–°–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –¥–∏—Å–ø–ª–µ—î–º —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ—Ä–æ–º.',
//   },
//   {
//     id: 2,
//     name: '–ù–æ—É—Ç–±—É–∫',
//     price: 25000,
//     description: '–õ–µ–≥–∫–∏–π —Ç–∞ –ø–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–æ–∑–≤–∞–≥.',
//   },
//   {
//     id: 3,
//     name: '–ü–ª–∞–Ω—à–µ—Ç',
//     price: 8000,
//     description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∏–π –ø–ª–∞–Ω—à–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.',
//   },
// ];

// function getProductDetails(id, success, error) {
//   // forEach –Ω–µ–¥–æ—Ä–µ—á–Ω–∏–π, –±–æ –≤—ñ–Ω –Ω–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î—Ç—å—Å—è –ø–æ–∫–∏ –Ω–µ –¥—ñ–π–¥–µ –¥–æ –∫—ñ–Ω—Ü—è –º–∞—Å–∏–≤—É –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —à—É–∫–∞–ª–∏ –±—É–¥–µ –ø–µ—Ä—à–∏–º
//   //   products.forEach(product => {
//   //     console.log(product.id);
//   //     if (product.id === id) {
//   //       success(product);
//   //     }
//   //   });
//   // –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ for

//   for (const product of products) {
//     if (product.id === id) {
//       return success(product);
//     }
//   }
//   error(id);
// }

// getProductDetails(3, handleSuccess, handleError);
// getProductDetails(44, handleSuccess, handleError);

// function handleSuccess(message) {
//   console.log(`‚úÖ Success!`, message);
// }

// function handleError(productId) {
//   console.log(`‚ùå Error! Product with ${productId} id not found`);
// }

/***  Task - 4 ****/

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calculateAveragePrice, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –Ω–∞ –≤—Ö—ñ–¥ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —Ç–æ–≤–∞—Ä–∏, —Ç–∞ –∫–æ–ª–±–µ–∫–∏ onSuccess —Ç–∞ onError.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –æ–±—á–∏—Å–ª—é–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–∞—Å–∏–≤—ñ —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ onSuccess, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –æ—Ç—Ä–∏–º–∞–Ω—É —Å–µ—Ä–µ–¥–Ω—é —Ü—ñ–Ω—É —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.
// –Ø–∫—â–æ –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ onError, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Ä—è–¥–æ–∫ "No products found".
// –î–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ toFixed(2), —â–æ–± –æ–±–º–µ–∂–∏—Ç–∏ —á–∏—Å–ª–æ –¥–æ –¥–≤–æ—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤.

// const products = [
//   { name: 'Apple', price: 0.99 },
//   { name: 'Banana', price: 0.49 },
//   { name: 'Orange', price: 0.79 },
//   { name: 'Mango', price: 1.99 },
// ];

// function calculateAveragePrice(products, onSuccess, onError) {
//   if (!products.length) {
//     // products.length === 0
//     onError('No products found');
//     return;
//   }

//   let total = 0;

//   // products.forEach((product) => total += product.price);
//   products.forEach(({ price }) => (total += price));

//   const averagePrice = total / products.length;
//   onSuccess(averagePrice);
// }

// const onSuccess = averagePrice => {
//   console.log(`Average price ${averagePrice.toFixed(2)}`);
// };

// const onError = errorMessage => {
//   console.log(`Error! ${errorMessage}`);
// };

// calculateAveragePrice(products, onSuccess, onError);

// const result = value => (value > 5 ? value - 5 : value + 5);
// console.log(result(4));

/***  Task - 5 ****/

// –î–æ–ø–æ–≤–Ω–∏ –∫–æ–¥ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± —É –∑–º—ñ–Ω–Ω—ñ–π result –±—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó makePizza,
// –∞ —É –∑–º—ñ–Ω–Ω—ñ–π pointer –±—É–ª–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é makePizza.
// function makePizza() {
//   return 'Your pizza is being prepared, please wait.';
// }
// // Change code below this line

// const result = makePizza();
// const pointer = makePizza;

/*** –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ***/

/***  Task - 6 ****/

// –î–æ–ø–æ–≤–Ω–∏ —Ñ—É–Ω–∫—Ü—ñ—é makeMessage —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –≤–æ–Ω–∞ –æ—á—ñ–∫—É–≤–∞–ª–∞ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º(–ø–∞—Ä–∞–º–µ—Ç—Ä callback)
// –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é —ñ –ø–æ–≤–µ—Ä—Ç–∞–ª–∞ —ó—ó –≤–∏–∫–ª–∏–∫.–§—É–Ω–∫—Ü—ñ—è deliverPizza –∞–±–æ makePizza –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏—Å—è
// —è–∫ –∫–æ–ª–±–µ–∫ —ñ –æ—á—ñ–∫—É–≤–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —ñ–º'—è –≥–æ—Ç–æ–≤–æ—ó –ø—ñ—Ü–∏, —â–æ –¥–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è.

// function deliverPizza(pizzaName) {
//   return `Delivering ${pizzaName} pizza.`;
// }

// function makePizza(pizzaName) {
//   return `Pizza ${pizzaName} is being prepared, please wait...`;
// }

// // Chande code below this line
// function makeMessage(pizzaName, callback) {
//   return callback(pizzaName);
// }
// makeMessage('Ultracheese', deliverPizza);
// makeMessage('Royal Grand', makePizza);

/***  Task - 7 ****/

// –î–æ–ø–æ–≤–Ω–∏ –¥—Ä—É–≥–∏–π –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó makePizza(pizzaName, callback), –ø–µ—Ä–µ–¥–∞–≤—à–∏ –¥—Ä—É–≥–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —ñ–Ω–ª–∞–π–Ω
// –∫–æ–ª–±–µ–∫ - —Ñ—É–Ω–∫—Ü—ñ—é eatPizza(pizzaName), —è–∫–∞ –ª–æ–≥—É—î —Ä—è–¥–æ–∫ "Eating pizza <–Ω–∞–∑–≤–∞ –ø—ñ—Ü–∏>".
// function makePizza(pizzaName, callback) {
//   console.log(`Pizza ${pizzaName} is being prepared, please wait...`);
//   callback(pizzaName);
// }

// makePizza('Royal Grand', function deliverPizza(pizzaName) {
//   console.log(`Delivering pizza ${pizzaName}.`);
// });
// // Change code below this line

// makePizza('Ultracheese', function eatPizza(pizzaName) {
//   console.log(`Eating pizza ${pizzaName}.`);
// });

/***  Task - 8 ****/

// –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–±—Ä–æ–±–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Ü–∏.–í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç–æ–¥—É order —Ç–∞–∫–∏–º —á–∏–Ω–æ–º,
// —â–æ–± –≤—ñ–Ω –ø—Ä–∏–π–º–∞–≤ –¥—Ä—É–≥–∏–º —ñ —Ç—Ä–µ—Ç—ñ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–≤–∞ –∫–æ–ª–±–µ–∫–∏ onSuccess —ñ onError.

// –Ø–∫—â–æ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ pizzas –≤—ñ–¥—Å—É—Ç–Ω—è –ø—ñ—Ü–∞ –∑ –Ω–∞–∑–≤–æ—é –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pizzaName,
//   –º–µ—Ç–æ–¥ order –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–µ–∫–∞ onError,
//   –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ä—è–¥–æ–∫ "There is no pizza with a name <–∏–º—è –ø–∏—Ü—Ü—ã> in the assortment."
// –Ø–∫—â–æ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ pizzas –ø—Ä–∏—Å—É—Ç–Ω—è –ø—ñ—Ü–∞ –∑ –Ω–∞–∑–≤–æ—é –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pizzaName,
//   –º–µ—Ç–æ–¥ order –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–µ–∫–∞ onSuccess,
//   –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –Ω–∞–∑–≤—É –∑–∞–º–æ–≤–ª–µ–Ω–æ—ó –ø—ñ—Ü–∏.
// –ü—ñ—Å–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ pizzaPalace –º–∏ –¥–æ–¥–∞–ª–∏ –∫–æ–ª–±–µ–∫–∏ —ñ –≤–∏–∫–ª–∏–∫–∏ –º–µ—Ç–æ–¥—ñ–≤.
// –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω—ñ—á–æ–≥–æ —Ç–∞–º –Ω–µ –º—ñ–Ω—è–π.

// const pizzaPalace = {
//   pizzas: ['Ultracheese', 'Smoked', 'Four meats'],
//   order(pizzaName, onSuccess, onError) {
//     const isPizzaNameOnMenu = this.pizzas.includes(pizzaName);
//     if (isPizzaNameOnMenu) {
//       return makePizza(pizzaName);
//     } else {
//       return onError(
//         `There is no pizza with a name ${pizzaName} in the assortment.`
//       );
//     }
//   },
// };
// // Change code above this line

// // Callback for onSuccess
// function makePizza(pizzaName) {
//   return `Your order is accepted. Cooking pizza ${pizzaName}.`;
// }

// // Callback for onError
// function onOrderError(error) {
//   return `Error! ${error}`;
// }

// // Method calls with callbacks
// pizzaPalace.order('Smoked', makePizza, onOrderError);
// pizzaPalace.order('Four meats', makePizza, onOrderError);
// pizzaPalace.order('Big Mike', makePizza, onOrderError);
// pizzaPalace.order('Vienna', makePizza, onOrderError);

/***  Task - 9 ****/

// –§—É–Ω–∫—Ü—ñ—è calculateTotalPrice(orderedItems) –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä orderedItems - –º–∞—Å–∏–≤ —á–∏—Å–µ–ª,
// —ñ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –π–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π totalPrice
// —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —è–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–±–æ—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó.
// –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –∑–∞–º—ñ—Å—Ç—å —Ü–∏–∫–ª—É for, –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞ –º–µ—Ç–æ–¥ forEach.

// function calculateTotalPrice(orderedItems) {
//   let totalPrice = 0;

//   orderedItems.forEach(function (number, index) {
//     console.log(`–Ü–Ω–¥–µ–∫—Å ${index}, –∑–Ω–∞—á–µ–Ω–Ω—è ${number}`);
//     totalPrice += number;
//   });
//   // Change code above this line
//   return totalPrice;
// }

// calculateTotalPrice([12, 85, 37, 4]);

/***  Task - 10 ****/

// –§—É–Ω–∫—Ü—ñ—è filterArray(numbers, value) –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª numbers —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤,
// –≤ —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∏–≤—É, —è–∫—ñ –±—ñ–ª—å—à—ñ –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ value.
// –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –∑–∞–º—ñ—Å—Ç—å —Ü–∏–∫–ª—É for, –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞ –º–µ—Ç–æ–¥ forEach.

// function filterArray(numbers, value) {
//   const filteredNumbers = [];
//   // Change code below this line

//   numbers.forEach(function (number, index) {
//     if (number > value) {
//       filteredNumbers.push(number);
//     }
//   });

//   // Change code above this line
//   return filteredNumbers;
// }
// filterArray([1, 2, 3, 4, 5], 3);

/***  Task - 11 ****/

// –§—É–Ω–∫—Ü—ñ—è getCommonElements(firstArray, secondArray) –ø—Ä–∏–π–º–∞—î –¥–≤–∞ –º–∞—Å–∏–≤–∏ –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏
// –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ firstArray —ñ secondArray, —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —ó—Ö–Ω—ñ—Ö —Å–ø—ñ–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤,
// —Ç–æ–±—Ç–æ —Ç–∏—Ö, —è–∫—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ –≤ –æ–±–æ—Ö –º–∞—Å–∏–≤–∞—Ö.
// –í–∏–∫–æ–Ω–∞–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, —â–æ–± –∑–∞–º—ñ—Å—Ç—å —Ü–∏–∫–ª—É for,
// –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞ –º–µ—Ç–æ–¥ forEach.

// function getCommonElements(firstArray, secondArray) {
//   const commonElements = [];
//   // Change code below this line

//   firstArray.forEach(function (element) {
//     if (secondArray.includes(element)) {
//       commonElements.push(element);
//     }
//   });

//   return commonElements;
//   // Change code above this line
// }

// getCommonElements([1, 2, 3], [2, 1, 17, 19]);
